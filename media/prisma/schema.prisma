generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name String @unique

    users User[] @relation(name: "roleUsers")

    permissions Permission[] @relation(name: "RolePermissions")

    @@map("role")
}

model User {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    username String @unique
    email String @unique
    password String

    roleId Int @default(4)
    role Role @relation(name: "roleUsers", fields: [roleId], references: [id])

    pictures Picture[] @relation(name: "UserPictures")
    activePictureId Int? @unique
    activePicture Picture? @relation(name: "UserActivePicture", fields: [activePictureId], references: [id])
    
    networks Network[] @relation(name: "UserNetworks")

    @@index([username, email])
    @@map("user")
}

model Picture {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    link String @unique
    extension String
    size Int

    userId Int
    user User @relation(name: "UserPictures", fields: [userId], references: [id])
    
    activePicture User? @relation(name: "UserActivePicture")

    @@index([link])
    @@map("picture")
}

model Permission {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name String @unique
    description String

    roles Role[] @relation(name: "RolePermissions")

    @@index([name])
    @@map("permission")
}

model Network {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isActive Boolean @default(true)
    name String @unique
    link String @unique
    extension String
    size Int

    users User[] @relation(name: "UserNetworks")

    @@index([name, link])
    @@map("network")
}

model Category {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isActive Boolean @default(true)
    name String @unique

    sounds Sound[] @relation(name: "CategorySounds")

    @@index([name])
    @@map("category")
}

model Sound {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    link String @unique
    extension String
    size Int
    url String

    categoryId Int
    category Category @relation(name: "CategorySounds", fields: [categoryId], references: [id])

    opening Opening? @relation(name: "OpeningSound")

    ending Ending? @relation(name: "EndingSound")

    @@index([link])
    @@map("sound")
}

model Image {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    link String @unique
    extension String
    size Int

    anime Anime? @relation(name: "AnimeImage")

    @@index([link])
    @@map("image")
}

model Anime {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isActive Boolean @default(true)
    title String @unique
    top100 Boolean @default(false)

    openings Opening[] @relation(name: "AnimeOpening")

    endings Ending[] @relation(name: "AnimeEnding")

    imageId Int? @unique
    image Image? @relation(name: "AnimeImage", fields: [imageId], references: [id])

    @@index([title])
    @@map("anime")
}

model Season {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name String @unique

    openings Opening[] @relation(name: "SeasonOpening")

    endings Ending[] @relation(name: "SeasonEnding")

    @@index([name])
    @@map("season")
}

model Opening {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isActive Boolean @default(true)
    name String
    number Int
    year Int

    animeId Int
    anime Anime @relation(name: "AnimeOpening", fields: [animeId], references: [id])

    seasonId Int
    season Season @relation(name: "SeasonOpening", fields: [seasonId], references: [id])

    soundId Int @unique
    sound Sound @relation(name: "OpeningSound", fields: [soundId], references: [id])

    @@index([name])
    @@map("opening")
}

model Ending {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isActive Boolean @default(true)
    name String
    number Int
    year Int

    animeId Int
    anime Anime @relation(name: "AnimeEnding", fields: [animeId], references: [id])

    seasonId Int
    season Season @relation(name: "SeasonEnding", fields: [seasonId], references: [id])

    soundId Int @unique
    sound Sound @relation(name: "EndingSound", fields: [soundId], references: [id])

    @@index([name])
    @@map("ending")
}

model Question_Opening {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isActive Boolean @default(true)
    question String @unique
    number Int 

    @@index([question])
    @@map("question_opening")
}

model Question_Ending {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isActive Boolean @default(true)
    question String @unique
    number Int

    @@index([question]) 
    @@map("question_ending")
}