generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model animes {
  id_anime   Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  is_active  Boolean   @default(true)
  title      String    @db.VarChar(255)
  top100     Boolean   @default(false)
  id_image   Int
  images     images    @relation(fields: [id_image], references: [id_image], onDelete: NoAction, onUpdate: NoAction)
  ending     ending[]
  opening    opening[]
}

model categories {
  id_category Int      @id @default(autoincrement())
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  is_active   Boolean  @default(true)
  name        String   @db.VarChar(255)
  sounds      sounds[]
}

model ending {
  id_ending  Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  is_active  Boolean  @default(true)
  name       String   @db.VarChar(255)
  number     Int
  year       Int
  id_anime   Int
  id_sound   Int
  id_season  Int
  animes     animes   @relation(fields: [id_anime], references: [id_anime], onDelete: NoAction, onUpdate: NoAction)
  seasons    seasons  @relation(fields: [id_season], references: [id_season], onDelete: NoAction, onUpdate: NoAction)
  sounds     sounds   @relation(fields: [id_sound], references: [id_sound], onDelete: NoAction, onUpdate: NoAction)
}

model images {
  id_image   Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  link       String   @db.VarChar(255)
  extension  String   @db.VarChar(5)
  size       Int
  animes     animes[]
}

model networks {
  id_network     Int              @id @default(autoincrement())
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  is_active      Boolean          @default(true)
  name           String           @db.VarChar(255)
  extension      String           @db.VarChar(5)
  size           Int
  users_networks users_networks[]
}

model opening {
  id_opening Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  is_active  Boolean  @default(true)
  name       String   @db.VarChar(255)
  number     Int
  year       Int
  id_anime   Int
  id_sound   Int
  id_season  Int
  animes     animes   @relation(fields: [id_anime], references: [id_anime], onDelete: NoAction, onUpdate: NoAction)
  seasons    seasons  @relation(fields: [id_season], references: [id_season], onDelete: NoAction, onUpdate: NoAction)
  sounds     sounds   @relation(fields: [id_sound], references: [id_sound], onDelete: NoAction, onUpdate: NoAction)
}

model permissions {
  id_permission     Int                 @id @default(autoincrement())
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  name              String              @db.VarChar(255)
  description       String?
  roles_permissions roles_permissions[]
  users_permissions users_permissions[]
}

model pictures {
  id_picture                       Int      @id @default(autoincrement())
  created_at                       DateTime @default(now()) @db.Timestamp(6)
  link                             String   @db.VarChar(255)
  extension                        String   @db.VarChar(5)
  size                             Int
  id_user                          Int
  users_pictures_id_userTousers    users    @relation("pictures_id_userTousers", fields: [id_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction)
  users_users_id_pictureTopictures users[]  @relation("users_id_pictureTopictures")
}

model questions_ending {
  id_question_ending Int      @id @default(autoincrement())
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @default(now()) @db.Timestamp(6)
  is_active          Boolean  @default(true)
  question           String   @db.VarChar(255)
  number             Int
}

model questions_opening {
  id_question_opening Int      @id @default(autoincrement())
  created_at          DateTime @default(now()) @db.Timestamp(6)
  updated_at          DateTime @default(now()) @db.Timestamp(6)
  is_active           Boolean  @default(true)
  question            String   @db.VarChar(255)
  number              Int
}

model roles {
  id_role           Int                 @id @default(autoincrement())
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  name              String              @db.VarChar(255)
  roles_permissions roles_permissions[]
  users             users[]
}

model roles_permissions {
  id_role       Int
  id_permission Int
  permissions   permissions @relation(fields: [id_permission], references: [id_permission], onDelete: NoAction, onUpdate: NoAction)
  roles         roles       @relation(fields: [id_role], references: [id_role], onDelete: NoAction, onUpdate: NoAction)

  @@id([id_role, id_permission])
}

model seasons {
  id_season  Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  name       String    @db.VarChar(255)
  ending     ending[]
  opening    opening[]
}

model sounds {
  id_sound    Int        @id @default(autoincrement())
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  link        String     @db.VarChar(255)
  extension   String     @db.VarChar(5)
  size        Int
  url         String?    @db.VarChar(255)
  id_category Int
  ending      ending[]
  opening     opening[]
  categories  categories @relation(fields: [id_category], references: [id_category], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id_user                             Int                 @id @default(autoincrement())
  created_at                          DateTime            @default(now()) @db.Timestamp(6)
  updated_at                          DateTime            @default(now()) @db.Timestamp(6)
  username                            String              @db.VarChar(255)
  email                               String              @unique @db.VarChar(255)
  password                            String              @db.VarChar(255)
  bio                                 String?
  id_role                             Int                 @default(4)
  id_picture                          Int?
  pictures_pictures_id_userTousers    pictures[]          @relation("pictures_id_userTousers")
  pictures_users_id_pictureTopictures pictures?           @relation("users_id_pictureTopictures", fields: [id_picture], references: [id_picture], onDelete: NoAction, onUpdate: NoAction)
  roles                               roles               @relation(fields: [id_role], references: [id_role], onDelete: NoAction, onUpdate: NoAction)
  users_networks                      users_networks[]
  users_permissions                   users_permissions[]
}

model users_networks {
  id_user    Int
  id_network Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  value      String   @db.VarChar(255)
  networks   networks @relation(fields: [id_network], references: [id_network], onDelete: NoAction, onUpdate: NoAction)
  users      users    @relation(fields: [id_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction)

  @@id([id_user, id_network])
}

model users_permissions {
  id_user       Int
  id_permission Int
  permissions   permissions @relation(fields: [id_permission], references: [id_permission], onDelete: NoAction, onUpdate: NoAction)
  users         users       @relation(fields: [id_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction)

  @@id([id_user, id_permission])
}
